{"version":3,"sources":["textures/NormalMap.png","components/Intro.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Intro","canvasRef","useRef","texture","useTexture","TEXTURE","useEffect","renderer","WebGLRenderer","alpha","setSize","window","innerWidth","innerHeight","setPixelRatio","Math","min","devicePixelRatio","current","appendChild","domElement","camera","PerspectiveCamera","position","x","y","z","scene","Scene","add","TextureLoader","geometry","SphereBufferGeometry","material","MeshStandardMaterial","metalness","roughness","console","log","normalMap","color","Color","sphere","Mesh","pointLight","PointLight","pointLight2","set","intensity","pointLight3","addEventListener","aspect","updateProjectionMatrix","clock","Clock","tick","requestAnimationFrame","elapsedTime","getElapsedTime","rotation","render","ref","styled","h1","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","createGlobalStyle","theme","colors","primary","ReactDOM","StrictMode","fallback","borderRadius","secondary","document","getElementById"],"mappings":"4KAAe,MAA0B,sC,eCK1B,SAASA,IACvB,IAAMC,EAAYC,iBAAuB,MACnCC,EAAUC,YAAWC,GA4E3B,OA3EAC,qBAAU,WACT,IAAMC,EAAW,IAAIC,gBAAc,CAAEC,OAAO,IAC5CF,EAASG,QAAQC,OAAOC,WAAYD,OAAOE,aAC3CN,EAASO,cAAcC,KAAKC,IAAIL,OAAOM,iBAAkB,IACzDhB,EAAUiB,QAASC,YAAYZ,EAASa,YAExC,IAAMC,EAAS,IAAIC,oBAAkB,GAAIX,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KACtFQ,EAAOE,SAASC,EAAI,EACpBH,EAAOE,SAASE,EAAI,EACpBJ,EAAOE,SAASG,EAAI,EAEpB,IAAMC,EAAQ,IAAIC,QAElBD,EAAME,IAAIR,GAEK,IAAIS,gBAAnB,IAEMC,EAAW,IAAIC,uBAAqB,GAAK,GAAI,IAC7CC,EAAW,IAAIC,uBACrBD,EAASE,UAAY,GACrBF,EAASG,UAAY,GAarBC,QAAQC,IAAInC,GACZ8B,EAASM,UAAYpC,EACrB8B,EAASO,MAAQ,IAAIC,QAAM,SAE3B,IAAMC,EAAS,IAAIC,OAAKZ,EAAUE,GAElCN,EAAME,IAAIa,GAEV,IAAME,EAAa,IAAIC,aAAW,SAAU,IAC5CD,EAAWrB,SAASC,EAAI,EACxBoB,EAAWrB,SAASE,EAAI,EACxBmB,EAAWrB,SAASG,EAAI,EACxBC,EAAME,IAAIe,GAEV,IAAME,EAAc,IAAID,aAAW,SAAU,GAC7CC,EAAYvB,SAASwB,KAAK,KAAM,GAAI,MACpCD,EAAYE,UAAY,GACxBrB,EAAME,IAAIiB,GAEV,IAAMG,EAAc,IAAIJ,aAAW,MAAQ,GAC3CI,EAAY1B,SAASwB,IAAI,KAAO,GAAI,MACpCE,EAAYD,UAAY,IACxBrB,EAAME,IAAIoB,GAEVtC,OAAOuC,iBAAiB,UAAU,WACjC7B,EAAO8B,OAASxC,OAAOC,WAAaD,OAAOE,YAC3CQ,EAAO+B,yBAEP7C,EAASG,QAAQC,OAAOC,WAAYD,OAAOE,aAC3CN,EAASO,cAAcC,KAAKC,IAAIL,OAAOM,iBAAkB,OAG1D,IAAMoC,EAAQ,IAAIC,QAClBjB,QAAQC,IAAI,aACC,SAAPiB,IACLC,sBAAsBD,GACtB,IAAME,EAAcJ,EAAMK,iBAC1BhB,EAAOiB,SAASlC,EAAI,GAAMgC,EAC1BlD,EAASqD,OAAOjC,EAAON,GAExBkC,KACE,IACI,qBAAKM,IAAK5D,IChFI6D,IAAOC,GAAV,qEAAGD,CAAH,gBAYJE,I,EAAAA,EARf,WACC,OACC,mCACC,cAAChE,EAAD,OCIYiE,EAZS,SAACC,GACpBA,GAAeA,aAAuBC,UACzC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKLQ,EAAeC,YAAH,gTAcP,qBAAGC,MAAkBC,OAAOC,WAIvCC,IAASnB,OACR,cAAC,IAAMoB,WAAP,UACC,cAAC,WAAD,CAAUC,SAAU,wBAApB,SACC,eAAC,IAAD,CAAeL,MA7BU,CAC3BM,aAAc,MACdL,OAAQ,CACPC,QAAS,OACTK,UAAW,SAyBV,UACC,cAAC,EAAD,IACA,cAACT,EAAD,WAIHU,SAASC,eAAe,SAMzBpB,M","file":"static/js/main.b4405594.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/NormalMap.3f37d29c.png\";","import { useEffect, useRef } from 'react'\nimport { Scene, TextureLoader, SphereBufferGeometry, MeshStandardMaterial, Color, Mesh, WebGLRenderer, PointLight, PerspectiveCamera, Clock } from 'three'\nimport TEXTURE from '../textures/NormalMap.png'\nimport { useTexture } from '@react-three/drei'\n\nexport default function Intro() {\n\tconst canvasRef = useRef<HTMLDivElement>(null)\n\tconst texture = useTexture(TEXTURE)\n\tuseEffect(() => {\n\t\tconst renderer = new WebGLRenderer({ alpha: false })\n\t\trenderer.setSize(window.innerWidth, window.innerHeight)\n\t\trenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\t\tcanvasRef.current!.appendChild(renderer.domElement)\n\n\t\tconst camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100)\n\t\tcamera.position.x = 0\n\t\tcamera.position.y = 0\n\t\tcamera.position.z = 2\n\n\t\tconst scene = new Scene()\n\n\t\tscene.add(camera)\n\n\t\tconst loader = new TextureLoader()\n\n\t\tconst geometry = new SphereBufferGeometry(0.5, 64, 64)\n\t\tconst material = new MeshStandardMaterial()\n\t\tmaterial.metalness = 0.7\n\t\tmaterial.roughness = 0.2\n\t\t// const texture = loader.load(\n\t\t// \tTEXTURE,\n\t\t// \tfunction (texture) {\n\t\t// \t\tconsole.log(texture)\n\t\t// \t},\n\t\t// \tfunction (progress) {\n\t\t// \t\tconsole.log(progress)\n\t\t// \t},\n\t\t// \tfunction (error) {\n\t\t// \t\tconsole.log(error)\n\t\t// \t}\n\t\t// )\n\t\tconsole.log(texture)\n\t\tmaterial.normalMap = texture\n\t\tmaterial.color = new Color(0x292929)\n\n\t\tconst sphere = new Mesh(geometry, material)\n\n\t\tscene.add(sphere)\n\n\t\tconst pointLight = new PointLight(0xffffff, 0.1)\n\t\tpointLight.position.x = 2\n\t\tpointLight.position.y = 3\n\t\tpointLight.position.z = 4\n\t\tscene.add(pointLight)\n\n\t\tconst pointLight2 = new PointLight(0xff0000, 2)\n\t\tpointLight2.position.set(-1.86, 1, -1.65)\n\t\tpointLight2.intensity = 10\n\t\tscene.add(pointLight2)\n\n\t\tconst pointLight3 = new PointLight(0xe1ff, 2)\n\t\tpointLight3.position.set(0.69, -3, -1.98)\n\t\tpointLight3.intensity = 6.8\n\t\tscene.add(pointLight3)\n\n\t\twindow.addEventListener('resize', () => {\n\t\t\tcamera.aspect = window.innerWidth / window.innerHeight\n\t\t\tcamera.updateProjectionMatrix()\n\n\t\t\trenderer.setSize(window.innerWidth, window.innerHeight)\n\t\t\trenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\t\t})\n\n\t\tconst clock = new Clock()\n\t\tconsole.log('got here')\n\t\tconst tick = () => {\n\t\t\trequestAnimationFrame(tick)\n\t\t\tconst elapsedTime = clock.getElapsedTime()\n\t\t\tsphere.rotation.y = 0.5 * elapsedTime\n\t\t\trenderer.render(scene, camera)\n\t\t}\n\t\ttick()\n\t}, [])\n\treturn <div ref={canvasRef} />\n}\n","import styled from 'styled-components/macro'\nimport Intro from './components/Intro'\n\nconst StyledHeading = styled.h1`\n\tcolor: red;\n`\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Intro />\n\t\t</>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider, DefaultTheme, createGlobalStyle } from 'styled-components'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nconst theme: DefaultTheme = {\n\tborderRadius: '8px',\n\tcolors: {\n\t\tprimary: '#000',\n\t\tsecondary: '#fff',\n\t},\n}\n\nconst GlobalStyles = createGlobalStyle`\n\t*, *::after, *::before {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: inherit;\n\t}\n\thtml {\n\t\tfont-size: 62.5%;\n\t}\n\tbody {\n\t\tbox-sizing: border-box;\n\t\tfont-family: Poppins, sans-serif;\n\t\tfont-weight: 400;\n\t\tline-height: 1.7;\n\t\tcolor: ${({ theme }) => theme.colors.primary};\n\t}\n`\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Suspense fallback={<div />}>\n\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t<App />\n\t\t\t\t<GlobalStyles />\n\t\t\t</ThemeProvider>\n\t\t</Suspense>\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}