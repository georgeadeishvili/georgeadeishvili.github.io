{"version":3,"sources":["textures/NormalMap.png","components/Intro.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledContainer","styled","div","theme","colors","secondary","StyledWebGL","mouseCords","section","x","y","Intro","canvasRef","useRef","texture","useTexture","TEXTURE","useEffect","renderer","WebGLRenderer","alpha","setSize","window","innerWidth","innerHeight","setPixelRatio","Math","min","devicePixelRatio","current","appendChild","domElement","addEventListener","event","clientX","clientY","camera","PerspectiveCamera","position","z","scene","Scene","add","TextureLoader","geometry","SphereBufferGeometry","material","MeshStandardMaterial","metalness","roughness","normalMap","color","Color","sphere","Mesh","pointLight","PointLight","pointLight2","set","intensity","pointLight3","aspect","updateProjectionMatrix","clock","Clock","tick","requestAnimationFrame","elapsedTime","getElapsedTime","rotation","render","ref","h1","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","createGlobalStyle","primary","background","ReactDOM","StrictMode","fallback","borderRadius","document","getElementById"],"mappings":"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","file":"static/js/main.059f14e8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/NormalMap.3f37d29c.png\";","import { useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { Scene, TextureLoader, SphereBufferGeometry, MeshStandardMaterial, Color, Mesh, WebGLRenderer, PointLight, PerspectiveCamera, Clock } from 'three'\nimport TEXTURE from '../textures/NormalMap.png'\nimport { useTexture } from '@react-three/drei'\n\nconst StyledContainer = styled.div`\n\theight: 100vh;\n\tdisplay: grid;\n\tplace-items: center;\n\n\th1 {\n\t\tfont-size: 8rem;\n\t\ttext-transform: uppercase;\n\t\tcolor: ${({ theme }) => theme.colors.secondary};\n\t}\n`\n\nconst StyledWebGL = styled.div`\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\toutline: none;\n\tmix-blend-mode: exclusion;\n`\n\nconst StyledSection = styled.section`\n\theight: 100vh;\n`\n\nlet mouseCords = {\n\tx: 0,\n\ty: 0\n}\n\nexport default function Intro() {\n\tconst canvasRef = useRef<HTMLDivElement>(null)\n\tconst texture = useTexture(TEXTURE)\n\tuseEffect(() => {\n\t\tconst renderer = new WebGLRenderer({ alpha: true })\n\t\trenderer.setSize(window.innerWidth, window.innerHeight)\n\t\trenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\t\tcanvasRef.current!.appendChild(renderer.domElement)\n\n\t\tcanvasRef.current!.addEventListener('mousemove', event => {\n\t\t\tmouseCords = {\n\t\t\t\tx: event.clientX - window.innerWidth / 2,\n\t\t\t\ty: event.clientY - window.innerHeight / 2\n\t\t\t}\n\t\t})\n\n\t\tconst camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100)\n\t\tcamera.position.x = 0\n\t\tcamera.position.y = 0\n\t\tcamera.position.z = 2\n\n\t\tconst scene = new Scene()\n\n\t\tscene.add(camera)\n\n\t\tconst loader = new TextureLoader()\n\n\t\tconst geometry = new SphereBufferGeometry(0.5, 64, 64)\n\t\tconst material = new MeshStandardMaterial()\n\t\tmaterial.metalness = 0.7\n\t\tmaterial.roughness = 0.2\n\n\t\tmaterial.normalMap = texture\n\t\tmaterial.color = new Color(0x292929)\n\n\t\tconst sphere = new Mesh(geometry, material)\n\n\t\tscene.add(sphere)\n\n\t\tconst pointLight = new PointLight(0xffffff, 0.1)\n\t\tpointLight.position.x = 2\n\t\tpointLight.position.y = 3\n\t\tpointLight.position.z = 4\n\t\tscene.add(pointLight)\n\n\t\tconst pointLight2 = new PointLight(0xff0000, 2)\n\t\tpointLight2.position.set(-1.86, 1, -1.65)\n\t\tpointLight2.intensity = 10\n\t\tscene.add(pointLight2)\n\n\t\tconst pointLight3 = new PointLight(0xe1ff, 2)\n\t\tpointLight3.position.set(0.69, -3, -1.98)\n\t\tpointLight3.intensity = 6.8\n\t\tscene.add(pointLight3)\n\n\t\twindow.addEventListener('resize', () => {\n\t\t\tcamera.aspect = window.innerWidth / window.innerHeight\n\t\t\tcamera.updateProjectionMatrix()\n\n\t\t\trenderer.setSize(window.innerWidth, window.innerHeight)\n\t\t\trenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\t\t})\n\n\t\tconst clock = new Clock()\n\n\t\tconst tick = () => {\n\t\t\trequestAnimationFrame(tick)\n\t\t\tconst elapsedTime = clock.getElapsedTime()\n\t\t\tsphere.rotation.y = 0.5 * elapsedTime\n\t\t\tsphere.rotation.y += 0.5 * (mouseCords.x * 0.001 - sphere.rotation.y)\n\t\t\tsphere.rotation.x += 0.05 * (mouseCords.y * 0.001 - sphere.rotation.x)\n\t\t\tsphere.rotation.y += -0.05 * (mouseCords.y * 0.001 - sphere.rotation.x)\n\t\t\trenderer.render(scene, camera)\n\t\t}\n\t\ttick()\n\t}, [])\n\treturn (\n\t\t<>\n\t\t\t<StyledContainer>\n\t\t\t\t<h1>Giorgi Adeishvili</h1>\n\t\t\t</StyledContainer>\n\t\t\t<StyledWebGL ref={canvasRef} />\n\t\t\t{/* <StyledSection /> */}\n\t\t</>\n\t)\n}\n","import styled from 'styled-components/macro'\nimport Intro from './components/Intro'\n\nconst StyledHeading = styled.h1`\n\tcolor: red;\n`\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Intro />\n\t\t</>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider, DefaultTheme, createGlobalStyle } from 'styled-components'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nconst theme: DefaultTheme = {\n\tborderRadius: '8px',\n\tcolors: {\n\t\tprimary: '#000',\n\t\tsecondary: '#fff',\n\t\tbackground: '#292929'\n\t}\n}\n\nconst GlobalStyles = createGlobalStyle`\n\t*, *::after, *::before {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: inherit;\n\t}\n\thtml {\n\t\tfont-size: 62.5%;\n\t}\n\tbody {\n\t\tbox-sizing: border-box;\n\t\tfont-family: Poppins, sans-serif;\n\t\tfont-weight: 400;\n\t\tline-height: 1.7;\n\t\tcolor: ${({ theme }) => theme.colors.primary};\n\t\tbackground-color: ${({ theme }) => theme.colors.background};\n\t}\n`\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Suspense fallback={<div />}>\n\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t<App />\n\t\t\t\t<GlobalStyles />\n\t\t\t</ThemeProvider>\n\t\t</Suspense>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}